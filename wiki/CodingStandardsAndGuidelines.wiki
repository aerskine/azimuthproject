#labels Phase-Implementation,Phase-Design,CodingStandards
How to create code that is homogeneous and easy to understand.

= Introduction =

Every software project needs coding standards and guidelines. There are two kinds of standards:

- those who try to encourage good coding practices that lead to leaner and understandable code,

- those who try to encourage certain conventions that will make the code easier to read because different developers will implement similar things in a similar way, although there are several different equally fitting ways to do it.

We will address both aspects and provide links to pages with more details.

= Details =

== Best Coding Practices ==

Today we don't write code for the compiler anymore, we write code for humans to read and understand it. This is the guiding principle of "best coding practices", these are guidelines for developers for structuring the code in a way that makes it easy to read and understand for other humans. 

A humurous "anti" best coding pratices guidline is Roedy Green's [http://azimuthproject.googlecode.com/svn/trunk/Wiki/CodingStandards/HowToWriteUnmaintainableCode.pdf How to Write Unmaintainable Code].

An ongoing list taken from practical experience is maintained on this Wiki: [BestCodingPractices]. 

== Coding Standards of Others ==

There are of course a lot of coding standards that other projects already defined, here we will link to those that we recommend:

- Java Coding Standards: [http://azimuthproject.googlecode.com/svn/trunk/Wiki/CodingStandards/SUN_Coding_Conventions.d01.pdf SUN Java Coding Standards]

== Tools ==

For Java project we encourage the use of 

- Checkstyle (see [http://en.wikipedia.org/wiki/Checkstyle Wikipedia on Checkstyle])

and

- Findbugs (see [http://en.wikipedia.org/wiki/FindBugs Wikipedia on Findbugs])